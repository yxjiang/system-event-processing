// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "utility.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace utility {

namespace {

const ::google::protobuf::Descriptor* CommunicationEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommunicationEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_utility_2eproto() {
  protobuf_AddDesc_utility_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "utility.proto");
  GOOGLE_CHECK(file != NULL);
  CommunicationEvent_descriptor_ = file->message_type(0);
  static const int CommunicationEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationEvent, eventsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationEvent, eventcontent_),
  };
  CommunicationEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommunicationEvent_descriptor_,
      CommunicationEvent::default_instance_,
      CommunicationEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommunicationEvent));
  MetaData_descriptor_ = file->message_type(1);
  static const int MetaData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, monitoruuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, jsonstring_),
  };
  MetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaData_descriptor_,
      MetaData::default_instance_,
      MetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_utility_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommunicationEvent_descriptor_, &CommunicationEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaData_descriptor_, &MetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_utility_2eproto() {
  delete CommunicationEvent::default_instance_;
  delete CommunicationEvent_reflection_;
  delete MetaData::default_instance_;
  delete MetaData_reflection_;
}

void protobuf_AddDesc_utility_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rutility.proto\022\007utility\"R\n\022Communicatio"
    "nEvent\022\021\n\teventType\030\001 \002(\t\022\023\n\013eventSource"
    "\030\002 \002(\t\022\024\n\014eventContent\030\003 \001(\t\"3\n\010MetaData"
    "\022\023\n\013monitorUUID\030\001 \002(\t\022\022\n\njsonString\030\003 \002("
    "\t", 161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "utility.proto", &protobuf_RegisterTypes);
  CommunicationEvent::default_instance_ = new CommunicationEvent();
  MetaData::default_instance_ = new MetaData();
  CommunicationEvent::default_instance_->InitAsDefaultInstance();
  MetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_utility_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_utility_2eproto {
  StaticDescriptorInitializer_utility_2eproto() {
    protobuf_AddDesc_utility_2eproto();
  }
} static_descriptor_initializer_utility_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CommunicationEvent::kEventTypeFieldNumber;
const int CommunicationEvent::kEventSourceFieldNumber;
const int CommunicationEvent::kEventContentFieldNumber;
#endif  // !_MSC_VER

CommunicationEvent::CommunicationEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommunicationEvent::InitAsDefaultInstance() {
}

CommunicationEvent::CommunicationEvent(const CommunicationEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommunicationEvent::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommunicationEvent::~CommunicationEvent() {
  SharedDtor();
}

void CommunicationEvent::SharedDtor() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtype_;
  }
  if (eventsource_ != &::google::protobuf::internal::kEmptyString) {
    delete eventsource_;
  }
  if (eventcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete eventcontent_;
  }
  if (this != default_instance_) {
  }
}

void CommunicationEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommunicationEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommunicationEvent_descriptor_;
}

const CommunicationEvent& CommunicationEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_utility_2eproto();  return *default_instance_;
}

CommunicationEvent* CommunicationEvent::default_instance_ = NULL;

CommunicationEvent* CommunicationEvent::New() const {
  return new CommunicationEvent;
}

void CommunicationEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventtype()) {
      if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
        eventtype_->clear();
      }
    }
    if (has_eventsource()) {
      if (eventsource_ != &::google::protobuf::internal::kEmptyString) {
        eventsource_->clear();
      }
    }
    if (has_eventcontent()) {
      if (eventcontent_ != &::google::protobuf::internal::kEmptyString) {
        eventcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommunicationEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventtype().data(), this->eventtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventSource;
        break;
      }
      
      // required string eventSource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventsource().data(), this->eventsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventContent;
        break;
      }
      
      // optional string eventContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventcontent().data(), this->eventcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommunicationEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventtype(), output);
  }
  
  // required string eventSource = 2;
  if (has_eventsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventsource().data(), this->eventsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventsource(), output);
  }
  
  // optional string eventContent = 3;
  if (has_eventcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventcontent().data(), this->eventcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommunicationEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventtype().data(), this->eventtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventtype(), target);
  }
  
  // required string eventSource = 2;
  if (has_eventsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventsource().data(), this->eventsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventsource(), target);
  }
  
  // optional string eventContent = 3;
  if (has_eventcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventcontent().data(), this->eventcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommunicationEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventtype());
    }
    
    // required string eventSource = 2;
    if (has_eventsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventsource());
    }
    
    // optional string eventContent = 3;
    if (has_eventcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunicationEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommunicationEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommunicationEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommunicationEvent::MergeFrom(const CommunicationEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventsource()) {
      set_eventsource(from.eventsource());
    }
    if (from.has_eventcontent()) {
      set_eventcontent(from.eventcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommunicationEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationEvent::CopyFrom(const CommunicationEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CommunicationEvent::Swap(CommunicationEvent* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventsource_, other->eventsource_);
    std::swap(eventcontent_, other->eventcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommunicationEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommunicationEvent_descriptor_;
  metadata.reflection = CommunicationEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaData::kMonitorUUIDFieldNumber;
const int MetaData::kJsonStringFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaData::InitAsDefaultInstance() {
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaData::SharedCtor() {
  _cached_size_ = 0;
  monitoruuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jsonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (monitoruuid_ != &::google::protobuf::internal::kEmptyString) {
    delete monitoruuid_;
  }
  if (jsonstring_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstring_;
  }
  if (this != default_instance_) {
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaData_descriptor_;
}

const MetaData& MetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_utility_2eproto();  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_monitoruuid()) {
      if (monitoruuid_ != &::google::protobuf::internal::kEmptyString) {
        monitoruuid_->clear();
      }
    }
    if (has_jsonstring()) {
      if (jsonstring_ != &::google::protobuf::internal::kEmptyString) {
        jsonstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string monitorUUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoruuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monitoruuid().data(), this->monitoruuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jsonString;
        break;
      }
      
      // required string jsonString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonstring().data(), this->jsonstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string monitorUUID = 1;
  if (has_monitoruuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monitoruuid().data(), this->monitoruuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->monitoruuid(), output);
  }
  
  // required string jsonString = 3;
  if (has_jsonstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstring().data(), this->jsonstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jsonstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string monitorUUID = 1;
  if (has_monitoruuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monitoruuid().data(), this->monitoruuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoruuid(), target);
  }
  
  // required string jsonString = 3;
  if (has_jsonstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstring().data(), this->jsonstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jsonstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string monitorUUID = 1;
    if (has_monitoruuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitoruuid());
    }
    
    // required string jsonString = 3;
    if (has_jsonstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monitoruuid()) {
      set_monitoruuid(from.monitoruuid());
    }
    if (from.has_jsonstring()) {
      set_jsonstring(from.jsonstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    std::swap(monitoruuid_, other->monitoruuid_);
    std::swap(jsonstring_, other->jsonstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaData_descriptor_;
  metadata.reflection = MetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace utility

// @@protoc_insertion_point(global_scope)
