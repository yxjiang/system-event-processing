// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utility.proto

#ifndef PROTOBUF_utility_2eproto__INCLUDED
#define PROTOBUF_utility_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace utility {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_utility_2eproto();
void protobuf_AssignDesc_utility_2eproto();
void protobuf_ShutdownFile_utility_2eproto();

class CommunicationEvent;
class MetaData;

// ===================================================================

class CommunicationEvent : public ::google::protobuf::Message {
 public:
  CommunicationEvent();
  virtual ~CommunicationEvent();
  
  CommunicationEvent(const CommunicationEvent& from);
  
  inline CommunicationEvent& operator=(const CommunicationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationEvent& default_instance();
  
  void Swap(CommunicationEvent* other);
  
  // implements Message ----------------------------------------------
  
  CommunicationEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommunicationEvent& from);
  void MergeFrom(const CommunicationEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string eventType = 1;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  inline const ::std::string& eventtype() const;
  inline void set_eventtype(const ::std::string& value);
  inline void set_eventtype(const char* value);
  inline void set_eventtype(const char* value, size_t size);
  inline ::std::string* mutable_eventtype();
  inline ::std::string* release_eventtype();
  
  // required string eventSource = 2;
  inline bool has_eventsource() const;
  inline void clear_eventsource();
  static const int kEventSourceFieldNumber = 2;
  inline const ::std::string& eventsource() const;
  inline void set_eventsource(const ::std::string& value);
  inline void set_eventsource(const char* value);
  inline void set_eventsource(const char* value, size_t size);
  inline ::std::string* mutable_eventsource();
  inline ::std::string* release_eventsource();
  
  // optional string eventContent = 3;
  inline bool has_eventcontent() const;
  inline void clear_eventcontent();
  static const int kEventContentFieldNumber = 3;
  inline const ::std::string& eventcontent() const;
  inline void set_eventcontent(const ::std::string& value);
  inline void set_eventcontent(const char* value);
  inline void set_eventcontent(const char* value, size_t size);
  inline ::std::string* mutable_eventcontent();
  inline ::std::string* release_eventcontent();
  
  // @@protoc_insertion_point(class_scope:utility.CommunicationEvent)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_eventsource();
  inline void clear_has_eventsource();
  inline void set_has_eventcontent();
  inline void clear_has_eventcontent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* eventtype_;
  ::std::string* eventsource_;
  ::std::string* eventcontent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_utility_2eproto();
  friend void protobuf_AssignDesc_utility_2eproto();
  friend void protobuf_ShutdownFile_utility_2eproto();
  
  void InitAsDefaultInstance();
  static CommunicationEvent* default_instance_;
};
// -------------------------------------------------------------------

class MetaData : public ::google::protobuf::Message {
 public:
  MetaData();
  virtual ~MetaData();
  
  MetaData(const MetaData& from);
  
  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaData& default_instance();
  
  void Swap(MetaData* other);
  
  // implements Message ----------------------------------------------
  
  MetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string monitorUUID = 1;
  inline bool has_monitoruuid() const;
  inline void clear_monitoruuid();
  static const int kMonitorUUIDFieldNumber = 1;
  inline const ::std::string& monitoruuid() const;
  inline void set_monitoruuid(const ::std::string& value);
  inline void set_monitoruuid(const char* value);
  inline void set_monitoruuid(const char* value, size_t size);
  inline ::std::string* mutable_monitoruuid();
  inline ::std::string* release_monitoruuid();
  
  // required string jsonString = 3;
  inline bool has_jsonstring() const;
  inline void clear_jsonstring();
  static const int kJsonStringFieldNumber = 3;
  inline const ::std::string& jsonstring() const;
  inline void set_jsonstring(const ::std::string& value);
  inline void set_jsonstring(const char* value);
  inline void set_jsonstring(const char* value, size_t size);
  inline ::std::string* mutable_jsonstring();
  inline ::std::string* release_jsonstring();
  
  // @@protoc_insertion_point(class_scope:utility.MetaData)
 private:
  inline void set_has_monitoruuid();
  inline void clear_has_monitoruuid();
  inline void set_has_jsonstring();
  inline void clear_has_jsonstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* monitoruuid_;
  ::std::string* jsonstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_utility_2eproto();
  friend void protobuf_AssignDesc_utility_2eproto();
  friend void protobuf_ShutdownFile_utility_2eproto();
  
  void InitAsDefaultInstance();
  static MetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// CommunicationEvent

// required string eventType = 1;
inline bool CommunicationEvent::has_eventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommunicationEvent::set_has_eventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommunicationEvent::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommunicationEvent::clear_eventtype() {
  if (eventtype_ != &::google::protobuf::internal::kEmptyString) {
    eventtype_->clear();
  }
  clear_has_eventtype();
}
inline const ::std::string& CommunicationEvent::eventtype() const {
  return *eventtype_;
}
inline void CommunicationEvent::set_eventtype(const ::std::string& value) {
  set_has_eventtype();
  if (eventtype_ == &::google::protobuf::internal::kEmptyString) {
    eventtype_ = new ::std::string;
  }
  eventtype_->assign(value);
}
inline void CommunicationEvent::set_eventtype(const char* value) {
  set_has_eventtype();
  if (eventtype_ == &::google::protobuf::internal::kEmptyString) {
    eventtype_ = new ::std::string;
  }
  eventtype_->assign(value);
}
inline void CommunicationEvent::set_eventtype(const char* value, size_t size) {
  set_has_eventtype();
  if (eventtype_ == &::google::protobuf::internal::kEmptyString) {
    eventtype_ = new ::std::string;
  }
  eventtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommunicationEvent::mutable_eventtype() {
  set_has_eventtype();
  if (eventtype_ == &::google::protobuf::internal::kEmptyString) {
    eventtype_ = new ::std::string;
  }
  return eventtype_;
}
inline ::std::string* CommunicationEvent::release_eventtype() {
  clear_has_eventtype();
  if (eventtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventtype_;
    eventtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string eventSource = 2;
inline bool CommunicationEvent::has_eventsource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommunicationEvent::set_has_eventsource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommunicationEvent::clear_has_eventsource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommunicationEvent::clear_eventsource() {
  if (eventsource_ != &::google::protobuf::internal::kEmptyString) {
    eventsource_->clear();
  }
  clear_has_eventsource();
}
inline const ::std::string& CommunicationEvent::eventsource() const {
  return *eventsource_;
}
inline void CommunicationEvent::set_eventsource(const ::std::string& value) {
  set_has_eventsource();
  if (eventsource_ == &::google::protobuf::internal::kEmptyString) {
    eventsource_ = new ::std::string;
  }
  eventsource_->assign(value);
}
inline void CommunicationEvent::set_eventsource(const char* value) {
  set_has_eventsource();
  if (eventsource_ == &::google::protobuf::internal::kEmptyString) {
    eventsource_ = new ::std::string;
  }
  eventsource_->assign(value);
}
inline void CommunicationEvent::set_eventsource(const char* value, size_t size) {
  set_has_eventsource();
  if (eventsource_ == &::google::protobuf::internal::kEmptyString) {
    eventsource_ = new ::std::string;
  }
  eventsource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommunicationEvent::mutable_eventsource() {
  set_has_eventsource();
  if (eventsource_ == &::google::protobuf::internal::kEmptyString) {
    eventsource_ = new ::std::string;
  }
  return eventsource_;
}
inline ::std::string* CommunicationEvent::release_eventsource() {
  clear_has_eventsource();
  if (eventsource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventsource_;
    eventsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string eventContent = 3;
inline bool CommunicationEvent::has_eventcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommunicationEvent::set_has_eventcontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommunicationEvent::clear_has_eventcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommunicationEvent::clear_eventcontent() {
  if (eventcontent_ != &::google::protobuf::internal::kEmptyString) {
    eventcontent_->clear();
  }
  clear_has_eventcontent();
}
inline const ::std::string& CommunicationEvent::eventcontent() const {
  return *eventcontent_;
}
inline void CommunicationEvent::set_eventcontent(const ::std::string& value) {
  set_has_eventcontent();
  if (eventcontent_ == &::google::protobuf::internal::kEmptyString) {
    eventcontent_ = new ::std::string;
  }
  eventcontent_->assign(value);
}
inline void CommunicationEvent::set_eventcontent(const char* value) {
  set_has_eventcontent();
  if (eventcontent_ == &::google::protobuf::internal::kEmptyString) {
    eventcontent_ = new ::std::string;
  }
  eventcontent_->assign(value);
}
inline void CommunicationEvent::set_eventcontent(const char* value, size_t size) {
  set_has_eventcontent();
  if (eventcontent_ == &::google::protobuf::internal::kEmptyString) {
    eventcontent_ = new ::std::string;
  }
  eventcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommunicationEvent::mutable_eventcontent() {
  set_has_eventcontent();
  if (eventcontent_ == &::google::protobuf::internal::kEmptyString) {
    eventcontent_ = new ::std::string;
  }
  return eventcontent_;
}
inline ::std::string* CommunicationEvent::release_eventcontent() {
  clear_has_eventcontent();
  if (eventcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventcontent_;
    eventcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MetaData

// required string monitorUUID = 1;
inline bool MetaData::has_monitoruuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaData::set_has_monitoruuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaData::clear_has_monitoruuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaData::clear_monitoruuid() {
  if (monitoruuid_ != &::google::protobuf::internal::kEmptyString) {
    monitoruuid_->clear();
  }
  clear_has_monitoruuid();
}
inline const ::std::string& MetaData::monitoruuid() const {
  return *monitoruuid_;
}
inline void MetaData::set_monitoruuid(const ::std::string& value) {
  set_has_monitoruuid();
  if (monitoruuid_ == &::google::protobuf::internal::kEmptyString) {
    monitoruuid_ = new ::std::string;
  }
  monitoruuid_->assign(value);
}
inline void MetaData::set_monitoruuid(const char* value) {
  set_has_monitoruuid();
  if (monitoruuid_ == &::google::protobuf::internal::kEmptyString) {
    monitoruuid_ = new ::std::string;
  }
  monitoruuid_->assign(value);
}
inline void MetaData::set_monitoruuid(const char* value, size_t size) {
  set_has_monitoruuid();
  if (monitoruuid_ == &::google::protobuf::internal::kEmptyString) {
    monitoruuid_ = new ::std::string;
  }
  monitoruuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaData::mutable_monitoruuid() {
  set_has_monitoruuid();
  if (monitoruuid_ == &::google::protobuf::internal::kEmptyString) {
    monitoruuid_ = new ::std::string;
  }
  return monitoruuid_;
}
inline ::std::string* MetaData::release_monitoruuid() {
  clear_has_monitoruuid();
  if (monitoruuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monitoruuid_;
    monitoruuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string jsonString = 3;
inline bool MetaData::has_jsonstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaData::set_has_jsonstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaData::clear_has_jsonstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaData::clear_jsonstring() {
  if (jsonstring_ != &::google::protobuf::internal::kEmptyString) {
    jsonstring_->clear();
  }
  clear_has_jsonstring();
}
inline const ::std::string& MetaData::jsonstring() const {
  return *jsonstring_;
}
inline void MetaData::set_jsonstring(const ::std::string& value) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(value);
}
inline void MetaData::set_jsonstring(const char* value) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(value);
}
inline void MetaData::set_jsonstring(const char* value, size_t size) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaData::mutable_jsonstring() {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  return jsonstring_;
}
inline ::std::string* MetaData::release_jsonstring() {
  clear_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jsonstring_;
    jsonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace utility

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_utility_2eproto__INCLUDED
