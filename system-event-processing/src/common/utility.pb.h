// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utility.proto

#ifndef PROTOBUF_utility_2eproto__INCLUDED
#define PROTOBUF_utility_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace utility {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_utility_2eproto();
void protobuf_AssignDesc_utility_2eproto();
void protobuf_ShutdownFile_utility_2eproto();

class MetaData;

// ===================================================================

class MetaData : public ::google::protobuf::Message {
 public:
  MetaData();
  virtual ~MetaData();
  
  MetaData(const MetaData& from);
  
  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaData& default_instance();
  
  void Swap(MetaData* other);
  
  // implements Message ----------------------------------------------
  
  MetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string monitorName = 1;
  inline bool has_monitorname() const;
  inline void clear_monitorname();
  static const int kMonitorNameFieldNumber = 1;
  inline const ::std::string& monitorname() const;
  inline void set_monitorname(const ::std::string& value);
  inline void set_monitorname(const char* value);
  inline void set_monitorname(const char* value, size_t size);
  inline ::std::string* mutable_monitorname();
  inline ::std::string* release_monitorname();
  
  // required string jsonString = 2;
  inline bool has_jsonstring() const;
  inline void clear_jsonstring();
  static const int kJsonStringFieldNumber = 2;
  inline const ::std::string& jsonstring() const;
  inline void set_jsonstring(const ::std::string& value);
  inline void set_jsonstring(const char* value);
  inline void set_jsonstring(const char* value, size_t size);
  inline ::std::string* mutable_jsonstring();
  inline ::std::string* release_jsonstring();
  
  // @@protoc_insertion_point(class_scope:utility.MetaData)
 private:
  inline void set_has_monitorname();
  inline void clear_has_monitorname();
  inline void set_has_jsonstring();
  inline void clear_has_jsonstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* monitorname_;
  ::std::string* jsonstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_utility_2eproto();
  friend void protobuf_AssignDesc_utility_2eproto();
  friend void protobuf_ShutdownFile_utility_2eproto();
  
  void InitAsDefaultInstance();
  static MetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// MetaData

// required string monitorName = 1;
inline bool MetaData::has_monitorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaData::set_has_monitorname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaData::clear_has_monitorname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaData::clear_monitorname() {
  if (monitorname_ != &::google::protobuf::internal::kEmptyString) {
    monitorname_->clear();
  }
  clear_has_monitorname();
}
inline const ::std::string& MetaData::monitorname() const {
  return *monitorname_;
}
inline void MetaData::set_monitorname(const ::std::string& value) {
  set_has_monitorname();
  if (monitorname_ == &::google::protobuf::internal::kEmptyString) {
    monitorname_ = new ::std::string;
  }
  monitorname_->assign(value);
}
inline void MetaData::set_monitorname(const char* value) {
  set_has_monitorname();
  if (monitorname_ == &::google::protobuf::internal::kEmptyString) {
    monitorname_ = new ::std::string;
  }
  monitorname_->assign(value);
}
inline void MetaData::set_monitorname(const char* value, size_t size) {
  set_has_monitorname();
  if (monitorname_ == &::google::protobuf::internal::kEmptyString) {
    monitorname_ = new ::std::string;
  }
  monitorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaData::mutable_monitorname() {
  set_has_monitorname();
  if (monitorname_ == &::google::protobuf::internal::kEmptyString) {
    monitorname_ = new ::std::string;
  }
  return monitorname_;
}
inline ::std::string* MetaData::release_monitorname() {
  clear_has_monitorname();
  if (monitorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monitorname_;
    monitorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string jsonString = 2;
inline bool MetaData::has_jsonstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaData::set_has_jsonstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaData::clear_has_jsonstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaData::clear_jsonstring() {
  if (jsonstring_ != &::google::protobuf::internal::kEmptyString) {
    jsonstring_->clear();
  }
  clear_has_jsonstring();
}
inline const ::std::string& MetaData::jsonstring() const {
  return *jsonstring_;
}
inline void MetaData::set_jsonstring(const ::std::string& value) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(value);
}
inline void MetaData::set_jsonstring(const char* value) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(value);
}
inline void MetaData::set_jsonstring(const char* value, size_t size) {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  jsonstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaData::mutable_jsonstring() {
  set_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    jsonstring_ = new ::std::string;
  }
  return jsonstring_;
}
inline ::std::string* MetaData::release_jsonstring() {
  clear_has_jsonstring();
  if (jsonstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jsonstring_;
    jsonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace utility

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_utility_2eproto__INCLUDED
